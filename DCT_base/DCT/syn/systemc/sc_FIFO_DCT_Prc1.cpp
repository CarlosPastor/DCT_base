// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sc_FIFO_DCT_Prc1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sc_FIFO_DCT_Prc1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sc_FIFO_DCT_Prc1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> sc_FIFO_DCT_Prc1::ap_ST_fsm_state2 = "10";
const sc_lv<3> sc_FIFO_DCT_Prc1::ap_ST_fsm_state3 = "100";
const sc_lv<32> sc_FIFO_DCT_Prc1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sc_FIFO_DCT_Prc1::ap_const_lv32_1 = "1";
const sc_lv<1> sc_FIFO_DCT_Prc1::ap_const_lv1_1 = "1";
const sc_lv<32> sc_FIFO_DCT_Prc1::ap_const_lv32_2 = "10";
const sc_lv<1> sc_FIFO_DCT_Prc1::ap_const_lv1_0 = "0";
const sc_lv<32> sc_FIFO_DCT_Prc1::ap_const_lv32_40 = "1000000";

sc_FIFO_DCT_Prc1::sc_FIFO_DCT_Prc1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_error);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_86_p2 );
    sensitive << ( tmp_21_read_fu_92_p2 );

    SC_METHOD(thread_error_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_86_p2 );
    sensitive << ( tmp_21_read_fu_92_p2 );

    SC_METHOD(thread_i0_2_phi_fu_147_p6);
    sensitive << ( i0_reg_132 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_86_p2 );
    sensitive << ( tmp_21_read_fu_92_p2 );
    sensitive << ( i0_4_fu_175_p2 );

    SC_METHOD(thread_i0_3_phi_fu_161_p4);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i0_2_phi_fu_147_p6 );
    sensitive << ( tmp_16_fu_182_p2 );

    SC_METHOD(thread_i0_4_fu_175_p2);
    sensitive << ( i0_reg_132 );

    SC_METHOD(thread_s_start);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_16_fu_182_p2 );

    SC_METHOD(thread_s_start_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_16_fu_182_p2 );

    SC_METHOD(thread_sc_FIFO_DCT_mA_V_address0);
    sensitive << ( i0_reg_132 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sc_FIFO_DCT_mA_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sc_FIFO_DCT_mA_V_d0);
    sensitive << ( din );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sc_FIFO_DCT_mA_V_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_86_p2 );
    sensitive << ( tmp_21_read_fu_92_p2 );

    SC_METHOD(thread_tmp_16_fu_182_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i0_2_phi_fu_147_p6 );

    SC_METHOD(thread_tmp_21_read_fu_92_p2);
    sensitive << ( s_working );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_86_p2 );

    SC_METHOD(thread_tmp_read_fu_86_p2);
    sensitive << ( sync );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sc_FIFO_DCT_Prc1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, sync, "(port)sync");
    sc_trace(mVcdFile, error, "(port)error");
    sc_trace(mVcdFile, error_ap_vld, "(port)error_ap_vld");
    sc_trace(mVcdFile, din, "(port)din");
    sc_trace(mVcdFile, s_start, "(port)s_start");
    sc_trace(mVcdFile, s_start_ap_vld, "(port)s_start_ap_vld");
    sc_trace(mVcdFile, s_working, "(port)s_working");
    sc_trace(mVcdFile, sc_FIFO_DCT_mA_V_address0, "(port)sc_FIFO_DCT_mA_V_address0");
    sc_trace(mVcdFile, sc_FIFO_DCT_mA_V_ce0, "(port)sc_FIFO_DCT_mA_V_ce0");
    sc_trace(mVcdFile, sc_FIFO_DCT_mA_V_we0, "(port)sc_FIFO_DCT_mA_V_we0");
    sc_trace(mVcdFile, sc_FIFO_DCT_mA_V_d0, "(port)sc_FIFO_DCT_mA_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, i0_reg_132, "i0_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i0_3_phi_fu_161_p4, "i0_3_phi_fu_161_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i0_2_phi_fu_147_p6, "i0_2_phi_fu_147_p6");
    sc_trace(mVcdFile, tmp_read_fu_86_p2, "tmp_read_fu_86_p2");
    sc_trace(mVcdFile, tmp_21_read_fu_92_p2, "tmp_21_read_fu_92_p2");
    sc_trace(mVcdFile, i0_4_fu_175_p2, "i0_4_fu_175_p2");
    sc_trace(mVcdFile, tmp_16_fu_182_p2, "tmp_16_fu_182_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sc_FIFO_DCT_Prc1::~sc_FIFO_DCT_Prc1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sc_FIFO_DCT_Prc1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        i0_reg_132 = i0_3_phi_fu_161_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state2.read(), ap_const_lv1_1))) {
        i0_reg_132 = ap_const_lv32_0;
    }
}

void sc_FIFO_DCT_Prc1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void sc_FIFO_DCT_Prc1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void sc_FIFO_DCT_Prc1::thread_error() {
    error =  (sc_logic) (ap_const_lv1_1[0]);
}

void sc_FIFO_DCT_Prc1::thread_error_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(tmp_read_fu_86_p2.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_read_fu_92_p2.read()))) {
        error_ap_vld = ap_const_logic_1;
    } else {
        error_ap_vld = ap_const_logic_0;
    }
}

void sc_FIFO_DCT_Prc1::thread_i0_2_phi_fu_147_p6() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(tmp_read_fu_86_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_read_fu_92_p2.read()))) {
        i0_2_phi_fu_147_p6 = i0_4_fu_175_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
                 !esl_seteq<1,1,1>(tmp_read_fu_86_p2.read(), ap_const_lv1_0) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_read_fu_92_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(tmp_read_fu_86_p2.read(), ap_const_lv1_0)))) {
        i0_2_phi_fu_147_p6 = i0_reg_132.read();
    } else {
        i0_2_phi_fu_147_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sc_FIFO_DCT_Prc1::thread_i0_3_phi_fu_161_p4() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_16_fu_182_p2.read())) {
            i0_3_phi_fu_161_p4 = i0_2_phi_fu_147_p6.read();
        } else if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_16_fu_182_p2.read())) {
            i0_3_phi_fu_161_p4 = ap_const_lv32_0;
        } else {
            i0_3_phi_fu_161_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        i0_3_phi_fu_161_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sc_FIFO_DCT_Prc1::thread_i0_4_fu_175_p2() {
    i0_4_fu_175_p2 = (!i0_reg_132.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i0_reg_132.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sc_FIFO_DCT_Prc1::thread_s_start() {
    s_start =  (sc_logic) (ap_const_lv1_1[0]);
}

void sc_FIFO_DCT_Prc1::thread_s_start_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_16_fu_182_p2.read()))) {
        s_start_ap_vld = ap_const_logic_1;
    } else {
        s_start_ap_vld = ap_const_logic_0;
    }
}

void sc_FIFO_DCT_Prc1::thread_sc_FIFO_DCT_mA_V_address0() {
    sc_FIFO_DCT_mA_V_address0 =  (sc_lv<6>) (i0_reg_132.read());
}

void sc_FIFO_DCT_Prc1::thread_sc_FIFO_DCT_mA_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        sc_FIFO_DCT_mA_V_ce0 = ap_const_logic_1;
    } else {
        sc_FIFO_DCT_mA_V_ce0 = ap_const_logic_0;
    }
}

void sc_FIFO_DCT_Prc1::thread_sc_FIFO_DCT_mA_V_d0() {
    sc_FIFO_DCT_mA_V_d0 = esl_zext<18,8>(din.read());
}

void sc_FIFO_DCT_Prc1::thread_sc_FIFO_DCT_mA_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !esl_seteq<1,1,1>(tmp_read_fu_86_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_read_fu_92_p2.read())))) {
        sc_FIFO_DCT_mA_V_we0 = ap_const_logic_1;
    } else {
        sc_FIFO_DCT_mA_V_we0 = ap_const_logic_0;
    }
}

void sc_FIFO_DCT_Prc1::thread_tmp_16_fu_182_p2() {
    tmp_16_fu_182_p2 = (!i0_2_phi_fu_147_p6.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): sc_lv<1>(i0_2_phi_fu_147_p6.read() == ap_const_lv32_40);
}

void sc_FIFO_DCT_Prc1::thread_tmp_21_read_fu_92_p2() {
    tmp_21_read_fu_92_p2 =  (sc_lv<1>) (s_working.read());
}

void sc_FIFO_DCT_Prc1::thread_tmp_read_fu_86_p2() {
    tmp_read_fu_86_p2 =  (sc_lv<1>) (sync.read());
}

void sc_FIFO_DCT_Prc1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

