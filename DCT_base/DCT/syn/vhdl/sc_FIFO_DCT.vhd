-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sc_FIFO_DCT is
port (
    clock : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    sync : IN STD_LOGIC;
    data_ok : OUT STD_LOGIC;
    done : OUT STD_LOGIC := '0';
    error : OUT STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (7 downto 0);
    dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sc_FIFO_DCT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sc_FIFO_DCT,hls_ip_2016_3,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35ticpg236-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.463000,HLS_SYN_LAT=857,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=2,HLS_SYN_FF=242,HLS_SYN_LUT=314}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal sc_FIFO_DCT_mA_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sc_FIFO_DCT_mA_V_ce0 : STD_LOGIC;
    signal sc_FIFO_DCT_mA_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sc_FIFO_DCT_ssdm_s_load_fu_146_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal grp_sc_FIFO_DCT_Prc2_fu_86_data_ok : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_data_ok_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_done : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_done_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sc_FIFO_DCT_Prc2_fu_86_dout_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_s_start_i : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_s_working : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_s_working_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0 : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_ce0 : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_we0 : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_sc_FIFO_DCT_Prc1_fu_118_error : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_error_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_s_start : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_s_start_ap_vld : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_s_working : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0 : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_we0 : STD_LOGIC;
    signal grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_start : STD_LOGIC_VECTOR (0 downto 0);
    signal s_working : STD_LOGIC_VECTOR (0 downto 0);

    component sc_FIFO_DCT_Prc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_ok : OUT STD_LOGIC;
        data_ok_ap_vld : OUT STD_LOGIC;
        done : OUT STD_LOGIC;
        done_ap_vld : OUT STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        dout_ap_vld : OUT STD_LOGIC;
        s_start_i : IN STD_LOGIC;
        s_start_o : OUT STD_LOGIC;
        s_start_o_ap_vld : OUT STD_LOGIC;
        s_working : OUT STD_LOGIC;
        s_working_ap_vld : OUT STD_LOGIC;
        sc_FIFO_DCT_mA_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sc_FIFO_DCT_mA_V_ce0 : OUT STD_LOGIC;
        sc_FIFO_DCT_mA_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        sc_FIFO_DCT_mB_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sc_FIFO_DCT_mB_V_ce0 : OUT STD_LOGIC;
        sc_FIFO_DCT_mB_V_we0 : OUT STD_LOGIC;
        sc_FIFO_DCT_mB_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sc_FIFO_DCT_Prc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        sync : IN STD_LOGIC;
        error : OUT STD_LOGIC;
        error_ap_vld : OUT STD_LOGIC;
        din : IN STD_LOGIC_VECTOR (7 downto 0);
        s_start : OUT STD_LOGIC;
        s_start_ap_vld : OUT STD_LOGIC;
        s_working : IN STD_LOGIC;
        sc_FIFO_DCT_mA_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sc_FIFO_DCT_mA_V_ce0 : OUT STD_LOGIC;
        sc_FIFO_DCT_mA_V_we0 : OUT STD_LOGIC;
        sc_FIFO_DCT_mA_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sc_FIFO_DCT_sc_FIeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sc_FIFO_DCT_sc_FIfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    sc_FIFO_DCT_mA_V_U : component sc_FIFO_DCT_sc_FIeOg
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => clock,
        reset => reset,
        address0 => sc_FIFO_DCT_mA_V_address0,
        ce0 => sc_FIFO_DCT_mA_V_ce0,
        we0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_we0,
        d0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_d0,
        q0 => sc_FIFO_DCT_mA_V_q0);

    sc_FIFO_DCT_mB_V_U : component sc_FIFO_DCT_sc_FIfYi
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => clock,
        reset => reset,
        address0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_address0,
        ce0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_ce0,
        we0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_we0,
        d0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_d0);

    grp_sc_FIFO_DCT_Prc2_fu_86 : component sc_FIFO_DCT_Prc2
    port map (
        ap_clk => clock,
        ap_rst => reset,
        data_ok => grp_sc_FIFO_DCT_Prc2_fu_86_data_ok,
        data_ok_ap_vld => grp_sc_FIFO_DCT_Prc2_fu_86_data_ok_ap_vld,
        done => grp_sc_FIFO_DCT_Prc2_fu_86_done,
        done_ap_vld => grp_sc_FIFO_DCT_Prc2_fu_86_done_ap_vld,
        dout => grp_sc_FIFO_DCT_Prc2_fu_86_dout,
        dout_ap_vld => grp_sc_FIFO_DCT_Prc2_fu_86_dout_ap_vld,
        s_start_i => grp_sc_FIFO_DCT_Prc2_fu_86_s_start_i,
        s_start_o => grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o,
        s_start_o_ap_vld => grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o_ap_vld,
        s_working => grp_sc_FIFO_DCT_Prc2_fu_86_s_working,
        s_working_ap_vld => grp_sc_FIFO_DCT_Prc2_fu_86_s_working_ap_vld,
        sc_FIFO_DCT_mA_V_address0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_address0,
        sc_FIFO_DCT_mA_V_ce0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0,
        sc_FIFO_DCT_mA_V_q0 => sc_FIFO_DCT_mA_V_q0,
        sc_FIFO_DCT_mB_V_address0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_address0,
        sc_FIFO_DCT_mB_V_ce0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_ce0,
        sc_FIFO_DCT_mB_V_we0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_we0,
        sc_FIFO_DCT_mB_V_d0 => grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mB_V_d0);

    grp_sc_FIFO_DCT_Prc1_fu_118 : component sc_FIFO_DCT_Prc1
    port map (
        ap_clk => clock,
        ap_rst => reset,
        sync => sync,
        error => grp_sc_FIFO_DCT_Prc1_fu_118_error,
        error_ap_vld => grp_sc_FIFO_DCT_Prc1_fu_118_error_ap_vld,
        din => din,
        s_start => grp_sc_FIFO_DCT_Prc1_fu_118_s_start,
        s_start_ap_vld => grp_sc_FIFO_DCT_Prc1_fu_118_s_start_ap_vld,
        s_working => grp_sc_FIFO_DCT_Prc1_fu_118_s_working,
        sc_FIFO_DCT_mA_V_address0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_address0,
        sc_FIFO_DCT_mA_V_ce0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0,
        sc_FIFO_DCT_mA_V_we0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_we0,
        sc_FIFO_DCT_mA_V_d0 => grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_d0);





    data_ok_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_data_ok_ap_vld)) then 
                data_ok <= grp_sc_FIFO_DCT_Prc2_fu_86_data_ok;
            end if; 
        end if;
    end process;


    done_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if (reset = '1') then
                done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_done_ap_vld)) then 
                    done <= grp_sc_FIFO_DCT_Prc2_fu_86_done;
                end if; 
            end if;
        end if;
    end process;


    dout_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_dout_ap_vld)) then 
                dout <= grp_sc_FIFO_DCT_Prc2_fu_86_dout;
            end if; 
        end if;
    end process;


    error_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc1_fu_118_error_ap_vld)) then 
                error <= grp_sc_FIFO_DCT_Prc1_fu_118_error;
            end if; 
        end if;
    end process;


    s_start_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc1_fu_118_s_start_ap_vld)) then 
                s_start <= (0=>grp_sc_FIFO_DCT_Prc1_fu_118_s_start, others=>'-');
            elsif ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o_ap_vld)) then 
                s_start <= (0=>grp_sc_FIFO_DCT_Prc2_fu_86_s_start_o, others=>'-');
            end if; 
        end if;
    end process;


    s_working_assign_proc : process(clock)
    begin
        if (clock'event and clock =  '1') then
            if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_s_working_ap_vld)) then 
                s_working <= (0=>grp_sc_FIFO_DCT_Prc2_fu_86_s_working, others=>'-');
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv2_0;
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    grp_sc_FIFO_DCT_Prc1_fu_118_s_working <= s_working(0);
    grp_sc_FIFO_DCT_Prc2_fu_86_s_start_i <= s_start(0);

    sc_FIFO_DCT_mA_V_address0_assign_proc : process(grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_address0, grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0, grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_address0, grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0)
    begin
        if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0)) then 
            sc_FIFO_DCT_mA_V_address0 <= grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_address0;
        elsif ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0)) then 
            sc_FIFO_DCT_mA_V_address0 <= grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_address0;
        else 
            sc_FIFO_DCT_mA_V_address0 <= "XXXXXX";
        end if; 
    end process;


    sc_FIFO_DCT_mA_V_ce0_assign_proc : process(grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0, grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0)
    begin
        if ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0)) then 
            sc_FIFO_DCT_mA_V_ce0 <= grp_sc_FIFO_DCT_Prc1_fu_118_sc_FIFO_DCT_mA_V_ce0;
        elsif ((ap_const_logic_1 = grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0)) then 
            sc_FIFO_DCT_mA_V_ce0 <= grp_sc_FIFO_DCT_Prc2_fu_86_sc_FIFO_DCT_mA_V_ce0;
        else 
            sc_FIFO_DCT_mA_V_ce0 <= 'X';
        end if; 
    end process;

    sc_FIFO_DCT_ssdm_s_load_fu_146_p1 <= ap_const_lv1_0;
end behav;
