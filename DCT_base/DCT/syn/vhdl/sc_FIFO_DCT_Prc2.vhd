-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sc_FIFO_DCT_Prc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_ok : OUT STD_LOGIC;
    data_ok_ap_vld : OUT STD_LOGIC;
    done : OUT STD_LOGIC;
    done_ap_vld : OUT STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_ap_vld : OUT STD_LOGIC;
    s_start_i : IN STD_LOGIC;
    s_start_o : OUT STD_LOGIC;
    s_start_o_ap_vld : OUT STD_LOGIC;
    s_working : OUT STD_LOGIC;
    s_working_ap_vld : OUT STD_LOGIC;
    sc_FIFO_DCT_mA_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sc_FIFO_DCT_mA_V_ce0 : OUT STD_LOGIC;
    sc_FIFO_DCT_mA_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    sc_FIFO_DCT_mB_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sc_FIFO_DCT_mB_V_ce0 : OUT STD_LOGIC;
    sc_FIFO_DCT_mB_V_we0 : OUT STD_LOGIC;
    sc_FIFO_DCT_mB_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of sc_FIFO_DCT_Prc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal b_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_a_ce0 : STD_LOGIC;
    signal b_a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i0_cast5_fu_316_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i0_cast5_reg_524 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i0_1_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i0_1_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_2_fu_338_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_2_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_348_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_548 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_reg_553 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_2_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_2_reg_561 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond4_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_a_load_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sc_FIFO_DCT_mA_V_loa_reg_581 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i1_3_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_3_reg_594 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_4_fu_436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_599 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sc_FIFO_DCT_mB_V_add_reg_604 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_3_fu_464_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_3_reg_612 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_load_reg_627 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_20_fu_502_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_reg_632 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_517_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_reg_229 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_read_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_load_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_264 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_1_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sc_FIFO_DCT_mB_V_loa_reg_286 : STD_LOGIC_VECTOR (17 downto 0);
    signal i2_1_reg_299 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_344_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_356_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_382_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_386_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_394_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_cast3_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_404_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_432_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_470_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_474_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_482_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_1_cast1_fu_454_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_492_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_509_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component sc_FIFO_DCT_mac_mcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sc_FIFO_DCT_mac_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sc_FIFO_DCT_Prc2_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sc_FIFO_DCT_Prc2_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sc_FIFO_DCT_Prc2_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    b_a_U : component sc_FIFO_DCT_Prc2_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_a_address0,
        ce0 => b_a_ce0,
        q0 => b_a_q0);

    b_U : component sc_FIFO_DCT_Prc2_b
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        q0 => b_q0);

    a_U : component sc_FIFO_DCT_Prc2_a
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => a_load_reg_251,
        q0 => a_q0);

    sc_FIFO_DCT_mac_mcud_U6 : component sc_FIFO_DCT_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 18,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_a_load_reg_576,
        din1 => grp_fu_509_p1,
        din2 => a_load_reg_251,
        dout => grp_fu_509_p3);

    sc_FIFO_DCT_mac_mdEe_U7 : component sc_FIFO_DCT_mac_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_20_reg_632,
        din1 => b_load_reg_627,
        din2 => sc_FIFO_DCT_mB_V_loa_reg_286,
        dout => grp_fu_517_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_load_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                a_load_reg_251 <= grp_fu_509_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (exitcond2_fu_332_p2 = ap_const_lv1_0))) then 
                a_load_reg_251 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond3_fu_420_p2)))) then 
                i0_reg_229 <= i0_1_reg_535;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_124_p2 = ap_const_lv1_0)))) then 
                i0_reg_229 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i1_1_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((exitcond2_fu_332_p2 = ap_const_lv1_0)))) then 
                i1_1_reg_275 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                i1_1_reg_275 <= i1_3_reg_594;
            end if; 
        end if;
    end process;

    i1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state4 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond1_fu_320_p2))) then 
                i1_reg_240 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond4_fu_370_p2)))) then 
                i1_reg_240 <= i1_2_reg_543;
            end if; 
        end if;
    end process;

    i2_1_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                i2_1_reg_299 <= i2_3_reg_612;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_420_p2))) then 
                i2_1_reg_299 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i2_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                i2_reg_264 <= i2_2_reg_561;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (exitcond2_fu_332_p2 = ap_const_lv1_0))) then 
                i2_reg_264 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sc_FIFO_DCT_mB_V_loa_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                sc_FIFO_DCT_mB_V_loa_reg_286 <= grp_fu_517_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_420_p2))) then 
                sc_FIFO_DCT_mB_V_loa_reg_286 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (exitcond2_fu_332_p2 = ap_const_lv1_0))) then
                a_addr_reg_553 <= tmp_2_cast_fu_361_p1(6 - 1 downto 0);
                    tmp_1_reg_548(5 downto 3) <= tmp_1_fu_348_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                b_a_load_reg_576 <= b_a_q0;
                sc_FIFO_DCT_mA_V_loa_reg_581 <= sc_FIFO_DCT_mA_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                b_load_reg_627 <= b_q0;
                tmp_20_reg_632 <= tmp_20_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state4 = ap_const_lv1_1))) then
                i0_1_reg_535 <= i0_1_fu_326_p2;
                    i0_cast5_reg_524(3 downto 0) <= i0_cast5_fu_316_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                i1_2_reg_543 <= i1_2_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                i1_3_reg_594 <= i1_3_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                i2_2_reg_561 <= i2_2_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                i2_3_reg_612 <= i2_3_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_420_p2))) then
                sc_FIFO_DCT_mB_V_add_reg_604 <= tmp_5_cast_fu_449_p1(6 - 1 downto 0);
                    tmp_4_reg_599(5 downto 3) <= tmp_4_fu_436_p3(5 downto 3);
            end if;
        end if;
    end process;
    i0_cast5_reg_524(5 downto 4) <= "00";
    tmp_1_reg_548(2 downto 0) <= "000";
    tmp_4_reg_599(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond2_fu_332_p2, exitcond4_fu_370_p2, exitcond3_fu_420_p2, exitcond_fu_458_p2, tmp_read_fu_124_p2, exitcond1_fu_320_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((tmp_read_fu_124_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((ap_const_lv1_0 = exitcond1_fu_320_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((exitcond2_fu_332_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_370_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_420_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_458_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(a_addr_reg_553, ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_12_cast_fu_487_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            a_address0 <= tmp_12_cast_fu_487_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            a_address0 <= a_addr_reg_553;
        else 
            a_address0 <= "XXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);
    b_a_address0 <= tmp_6_cast_fu_399_p1(6 - 1 downto 0);

    b_a_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            b_a_ce0 <= ap_const_logic_1;
        else 
            b_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_13_cast_fu_497_p1(6 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ok_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_458_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            data_ok <= ap_const_logic_0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_458_p2)))) then 
            data_ok <= ap_const_logic_1;
        else 
            data_ok <= 'X';
        end if; 
    end process;


    data_ok_ap_vld_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_458_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_458_p2))))) then 
            data_ok_ap_vld <= ap_const_logic_1;
        else 
            data_ok_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    done <= ap_const_logic_1;

    done_ap_vld_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_320_p2)
    begin
        if (((ap_CS_fsm_state4 = ap_const_lv1_1) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then 
            done_ap_vld <= ap_const_logic_1;
        else 
            done_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dout <= ap_const_lv8_7F;

    dout_ap_vld_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_458_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_458_p2)))) then 
            dout_ap_vld <= ap_const_logic_1;
        else 
            dout_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_320_p2 <= "1" when (i0_reg_229 = ap_const_lv4_8) else "0";
    exitcond2_fu_332_p2 <= "1" when (i1_reg_240 = ap_const_lv4_8) else "0";
    exitcond3_fu_420_p2 <= "1" when (i1_1_reg_275 = ap_const_lv4_8) else "0";
    exitcond4_fu_370_p2 <= "1" when (i2_reg_264 = ap_const_lv4_8) else "0";
    exitcond_fu_458_p2 <= "1" when (i2_1_reg_299 = ap_const_lv4_8) else "0";
    grp_fu_509_p1 <= grp_fu_509_p10(18 - 1 downto 0);
    grp_fu_509_p10 <= std_logic_vector(resize(unsigned(sc_FIFO_DCT_mA_V_loa_reg_581),26));
    i0_1_fu_326_p2 <= std_logic_vector(unsigned(i0_reg_229) + unsigned(ap_const_lv4_1));
    i0_cast5_fu_316_p1 <= std_logic_vector(resize(unsigned(i0_reg_229),6));
    i1_2_fu_338_p2 <= std_logic_vector(unsigned(i1_reg_240) + unsigned(ap_const_lv4_1));
    i1_3_fu_426_p2 <= std_logic_vector(unsigned(i1_1_reg_275) + unsigned(ap_const_lv4_1));
    i2_1_cast1_fu_454_p1 <= std_logic_vector(resize(unsigned(i2_1_reg_299),6));
    i2_2_fu_376_p2 <= std_logic_vector(unsigned(i2_reg_264) + unsigned(ap_const_lv4_1));
    i2_3_fu_464_p2 <= std_logic_vector(unsigned(i2_1_reg_299) + unsigned(ap_const_lv4_1));
    i2_cast3_fu_366_p1 <= std_logic_vector(resize(unsigned(i2_reg_264),6));
    s_start_o <= ap_const_logic_0;

    s_start_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_read_fu_124_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_124_p2 = ap_const_lv1_0)))) then 
            s_start_o_ap_vld <= ap_const_logic_1;
        else 
            s_start_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    s_working_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_read_fu_124_p2, exitcond1_fu_320_p2)
    begin
        if (((ap_CS_fsm_state4 = ap_const_lv1_1) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then 
            s_working <= ap_const_logic_0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_124_p2 = ap_const_lv1_0)))) then 
            s_working <= ap_const_logic_1;
        else 
            s_working <= 'X';
        end if; 
    end process;


    s_working_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_read_fu_124_p2, exitcond1_fu_320_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_124_p2 = ap_const_lv1_0))) or ((ap_CS_fsm_state4 = ap_const_lv1_1) and not((ap_const_lv1_0 = exitcond1_fu_320_p2))))) then 
            s_working_ap_vld <= ap_const_logic_1;
        else 
            s_working_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sc_FIFO_DCT_mA_V_address0 <= tmp_9_cast_fu_409_p1(6 - 1 downto 0);

    sc_FIFO_DCT_mA_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            sc_FIFO_DCT_mA_V_ce0 <= ap_const_logic_1;
        else 
            sc_FIFO_DCT_mA_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sc_FIFO_DCT_mB_V_address0 <= sc_FIFO_DCT_mB_V_add_reg_604;

    sc_FIFO_DCT_mB_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            sc_FIFO_DCT_mB_V_ce0 <= ap_const_logic_1;
        else 
            sc_FIFO_DCT_mB_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sc_FIFO_DCT_mB_V_d0 <= sc_FIFO_DCT_mB_V_loa_reg_286;

    sc_FIFO_DCT_mB_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state10)))) then 
            sc_FIFO_DCT_mB_V_we0 <= ap_const_logic_1;
        else 
            sc_FIFO_DCT_mB_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_474_p3 <= (tmp_19_fu_470_p1 & ap_const_lv3_0);
    tmp_11_fu_482_p2 <= std_logic_vector(unsigned(i0_cast5_reg_524) + unsigned(tmp_10_fu_474_p3));
    tmp_12_cast_fu_487_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_482_p2),32));
    tmp_12_fu_492_p2 <= std_logic_vector(unsigned(tmp_4_reg_599) + unsigned(i2_1_cast1_fu_454_p1));
    tmp_13_cast_fu_497_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_492_p2),32));
    tmp_16_fu_344_p1 <= i1_reg_240(3 - 1 downto 0);
    tmp_17_fu_432_p1 <= i1_1_reg_275(3 - 1 downto 0);
    tmp_18_fu_382_p1 <= i2_reg_264(3 - 1 downto 0);
    tmp_19_fu_470_p1 <= i2_1_reg_299(3 - 1 downto 0);
    tmp_1_fu_348_p3 <= (tmp_16_fu_344_p1 & ap_const_lv3_0);
    tmp_20_fu_502_p1 <= a_q0(18 - 1 downto 0);
    tmp_2_cast_fu_361_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_356_p2),32));
    tmp_2_fu_356_p2 <= std_logic_vector(unsigned(i0_cast5_reg_524) + unsigned(tmp_1_fu_348_p3));
    tmp_3_fu_386_p3 <= (tmp_18_fu_382_p1 & ap_const_lv3_0);
    tmp_4_fu_436_p3 <= (tmp_17_fu_432_p1 & ap_const_lv3_0);
    tmp_5_cast_fu_449_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_444_p2),32));
    tmp_5_fu_444_p2 <= std_logic_vector(unsigned(tmp_4_fu_436_p3) + unsigned(i0_cast5_reg_524));
    tmp_6_cast_fu_399_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_394_p2),32));
    tmp_6_fu_394_p2 <= std_logic_vector(unsigned(tmp_3_fu_386_p3) + unsigned(i0_cast5_reg_524));
    tmp_9_cast_fu_409_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_404_p2),32));
    tmp_9_fu_404_p2 <= std_logic_vector(unsigned(i2_cast3_fu_366_p1) + unsigned(tmp_1_reg_548));
    tmp_read_fu_124_p2 <= (0=>s_start_i, others=>'-');
end behav;
