-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sc_FIFO_DCT_Prc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    sync : IN STD_LOGIC;
    error : OUT STD_LOGIC;
    error_ap_vld : OUT STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (7 downto 0);
    s_start : OUT STD_LOGIC;
    s_start_ap_vld : OUT STD_LOGIC;
    s_working : IN STD_LOGIC;
    sc_FIFO_DCT_mA_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sc_FIFO_DCT_mA_V_ce0 : OUT STD_LOGIC;
    sc_FIFO_DCT_mA_V_we0 : OUT STD_LOGIC;
    sc_FIFO_DCT_mA_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of sc_FIFO_DCT_Prc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";

    signal i0_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i0_3_phi_fu_161_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i0_2_phi_fu_147_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_read_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_read_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i0_4_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i0_reg_132 <= i0_3_phi_fu_161_p4;
            elsif (((ap_CS_fsm_state2 = ap_const_lv1_1))) then 
                i0_reg_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    error <= ap_const_logic_1;

    error_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_read_fu_86_p2, tmp_21_read_fu_92_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_86_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_21_read_fu_92_p2)))) then 
            error_ap_vld <= ap_const_logic_1;
        else 
            error_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    i0_2_phi_fu_147_p6_assign_proc : process(i0_reg_132, ap_CS_fsm_state3, tmp_read_fu_86_p2, tmp_21_read_fu_92_p2, i0_4_fu_175_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_86_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_21_read_fu_92_p2))) then 
            i0_2_phi_fu_147_p6 <= i0_4_fu_175_p2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_86_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_21_read_fu_92_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_read_fu_86_p2 = ap_const_lv1_0)))) then 
            i0_2_phi_fu_147_p6 <= i0_reg_132;
        else 
            i0_2_phi_fu_147_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    i0_3_phi_fu_161_p4_assign_proc : process(ap_CS_fsm_state3, i0_2_phi_fu_147_p6, tmp_16_fu_182_p2)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state3)) then
            if ((ap_const_lv1_0 = tmp_16_fu_182_p2)) then 
                i0_3_phi_fu_161_p4 <= i0_2_phi_fu_147_p6;
            elsif (not((ap_const_lv1_0 = tmp_16_fu_182_p2))) then 
                i0_3_phi_fu_161_p4 <= ap_const_lv32_0;
            else 
                i0_3_phi_fu_161_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            i0_3_phi_fu_161_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i0_4_fu_175_p2 <= std_logic_vector(unsigned(i0_reg_132) + unsigned(ap_const_lv32_1));
    s_start <= ap_const_logic_1;

    s_start_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_16_fu_182_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_16_fu_182_p2)))) then 
            s_start_ap_vld <= ap_const_logic_1;
        else 
            s_start_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sc_FIFO_DCT_mA_V_address0 <= i0_reg_132(6 - 1 downto 0);

    sc_FIFO_DCT_mA_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            sc_FIFO_DCT_mA_V_ce0 <= ap_const_logic_1;
        else 
            sc_FIFO_DCT_mA_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sc_FIFO_DCT_mA_V_d0 <= std_logic_vector(resize(unsigned(din),18));

    sc_FIFO_DCT_mA_V_we0_assign_proc : process(ap_CS_fsm_state3, tmp_read_fu_86_p2, tmp_21_read_fu_92_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_read_fu_86_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_21_read_fu_92_p2)))) then 
            sc_FIFO_DCT_mA_V_we0 <= ap_const_logic_1;
        else 
            sc_FIFO_DCT_mA_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_16_fu_182_p2 <= "1" when (i0_2_phi_fu_147_p6 = ap_const_lv32_40) else "0";
    tmp_21_read_fu_92_p2 <= (0=>s_working, others=>'-');
    tmp_read_fu_86_p2 <= (0=>sync, others=>'-');
end behav;
