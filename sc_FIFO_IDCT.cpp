#include "sc_FIFO_IDCT.h"

static const double b_a[] = { 0.3536, 0.3536, 0.3536, 0.3536, 0.3536, 0.3536,
	    0.3536, 0.3536, 0.4904, 0.4157, 0.2778, 0.0975, -0.0975, -0.2778, -0.4157,
	    -0.4904, 0.4619, 0.1913, -0.1913, -0.4619, -0.4619, -0.1913, 0.1913, 0.4619,
	    0.4157, -0.0975, -0.4904, -0.2778, 0.2778, 0.4904, 0.0975, -0.4157, 0.3536,
	    -0.3536, -0.3536, 0.3536, 0.3536, -0.3536, -0.3536, 0.3536, 0.2778, -0.4904,
	    0.0975, 0.4157, -0.4157, -0.0975, 0.4904, -0.2778, 0.1913, -0.4619, 0.4619,
	    -0.1913, -0.1913, 0.4619, -0.4619, 0.1913, 0.0975, -0.2778, 0.4157, -0.4904,
	    0.4904, -0.4157, 0.2778, -0.0975 };

		static const double b[] = { 0.3536, 0.4904, 0.4619, 0.4157, 0.3536, 0.2778,
		0.1913, 0.0975, 0.3536, 0.4157, 0.1913, -0.0975, -0.3536, -0.4904, -0.4619,
		-0.2778, 0.3536, 0.2778, -0.1913, -0.4904, -0.3536, 0.0975, 0.4619, 0.4157,
	    0.3536, 0.0975, -0.4619, -0.2778, 0.3536, 0.4157, -0.1913, -0.4904, 0.3536,
		-0.0975, -0.4619, 0.2778, 0.3536, -0.4157, -0.1913, 0.4904, 0.3536, -0.2778,
	    -0.1913, 0.4904, -0.3536, -0.0975, 0.4619, -0.4157, 0.3536, -0.4157, 0.1913,
	    0.0975, -0.3536, 0.4904, -0.4619, 0.2778, 0.3536, -0.4904, 0.4619, -0.4157,
	    0.3536, -0.2778, 0.1913, -0.0975 };


void sc_FIFO_IDCT::Prc1()
{
   //Initialization
   write_done = false;

   wait();
   while(true)
   {
      while (din.num_available() < 64 ) wait();
      write_done = false;

      for(int i=0;i<64; i++)
        mA[i] = din.read();

      write_done = true;
      wait();
   } //end of while(true)
}

void sc_FIFO_IDCT::Prc2()
{
   //Initialization
   done = false;
   double a[64];
   int i0 = 0;
   int i1 = 0;
   int i2 = 0;

   wait();

   while(true)
   {
      while (!start.read()) wait();
      wait();
      while (!write_done) wait();


      for (i0 = 0; i0 < 8; i0++) {
		  for (i1 = 0; i1 < 8; i1++) {
			a[i0 + (i1 << 3)] = 0.0;
			for (i2 = 0; i2 < 8; i2++) {
			  a[i0 + (i1 << 3)] += b_a[i0 + (i2 << 3)] * mA[i2 + (i1 << 3)];
			}
		  }

		  for (i1 = 0; i1 < 8; i1++) {
			mB[i0 + (i1 << 3)] = 0.0;
			for (i2 = 0; i2 < 8; i2++) {
			  mB[i0 + (i1 << 3)] += a[i0 + (i2 << 3)] * b[i2 + (i1 << 3)];
			}
			dout.write(mB[i0 + (i1 << 3)]);
		  }
		}

      done = true;
      wait();
   } //end of while(true)
}
